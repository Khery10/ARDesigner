// Generated by Dagger (https://google.github.io/dagger).
package com.example.android.ardesigner.basic.di;

import android.app.Activity;
import android.app.Application;
import androidx.fragment.app.Fragment;
import androidx.lifecycle.ViewModel;
import com.example.android.ardesigner.basic.AppExecutors;
import com.example.android.ardesigner.basic.AppExecutors_Factory;
import com.example.android.ardesigner.basic.DesignerApp;
import com.example.android.ardesigner.basic.DesignerApp_MembersInjector;
import com.example.android.ardesigner.basic.camera.interfaces.ICameraProvider;
import com.example.android.ardesigner.basic.repository.interfaces.ICategoryRepository;
import com.example.android.ardesigner.basic.viewModel.AppViewModelFactory;
import com.example.android.ardesigner.basic.viewModel.AppViewModelFactory_Factory;
import com.example.android.ardesigner.basic.views.CameraActivity;
import com.example.android.ardesigner.basic.views.CameraActivity_MembersInjector;
import com.example.android.ardesigner.basic.views.MainActivity;
import com.example.android.ardesigner.basic.views.MainActivity_MembersInjector;
import com.example.android.ardesigner.basic.views.camera.CameraFragment;
import com.example.android.ardesigner.basic.views.camera.CameraFragment_MembersInjector;
import com.example.android.ardesigner.basic.views.menu.MenuFragment;
import com.example.android.ardesigner.basic.views.menu.categories.CategoryFragment;
import com.example.android.ardesigner.basic.views.menu.categories.CategoryFragment_MembersInjector;
import com.example.android.ardesigner.basic.views.menu.categories.CategoryViewModel;
import com.example.android.ardesigner.basic.views.menu.categories.CategoryViewModel_Factory;
import dagger.android.AndroidInjector;
import dagger.android.DispatchingAndroidInjector;
import dagger.android.DispatchingAndroidInjector_Factory;
import dagger.internal.DoubleCheck;
import dagger.internal.MapBuilder;
import dagger.internal.MapProviderFactory;
import dagger.internal.Preconditions;
import java.util.Map;
import javax.inject.Provider;

public final class DaggerAppComponent implements AppComponent {
  private Provider<ActivityModule_ContributeMainActivity.MainActivitySubcomponent.Builder>
      mainActivitySubcomponentBuilderProvider;

  private Provider<ActivityModule_ContributeCameraActivity.CameraActivitySubcomponent.Builder>
      cameraActivitySubcomponentBuilderProvider;

  private Provider<AppExecutors> appExecutorsProvider;

  private Provider<ICategoryRepository> provideCategoryRepositoryProvider;

  private CategoryViewModel_Factory categoryViewModelProvider;

  private Provider<Map<Class<? extends ViewModel>, Provider<ViewModel>>>
      mapOfClassOfAndProviderOfViewModelProvider;

  private Provider<AppViewModelFactory> appViewModelFactoryProvider;

  private Provider<ICameraProvider> provideCameraProvider;

  private DaggerAppComponent(Builder builder) {
    initialize(builder);
  }

  public static AppComponent.Builder builder() {
    return new Builder();
  }

  private Map<Class<? extends Activity>, Provider<AndroidInjector.Factory<? extends Activity>>>
      getMapOfClassOfAndProviderOfFactoryOf() {
    return MapBuilder
        .<Class<? extends Activity>, Provider<AndroidInjector.Factory<? extends Activity>>>
            newMapBuilder(2)
        .put(MainActivity.class, (Provider) mainActivitySubcomponentBuilderProvider)
        .put(CameraActivity.class, (Provider) cameraActivitySubcomponentBuilderProvider)
        .build();
  }

  private DispatchingAndroidInjector<Activity> getDispatchingAndroidInjectorOfActivity() {
    return DispatchingAndroidInjector_Factory.newDispatchingAndroidInjector(
        getMapOfClassOfAndProviderOfFactoryOf());
  }

  @SuppressWarnings("unchecked")
  private void initialize(final Builder builder) {
    this.mainActivitySubcomponentBuilderProvider =
        new Provider<ActivityModule_ContributeMainActivity.MainActivitySubcomponent.Builder>() {
          @Override
          public ActivityModule_ContributeMainActivity.MainActivitySubcomponent.Builder get() {
            return new MainActivitySubcomponentBuilder();
          }
        };
    this.cameraActivitySubcomponentBuilderProvider =
        new Provider<ActivityModule_ContributeCameraActivity.CameraActivitySubcomponent.Builder>() {
          @Override
          public ActivityModule_ContributeCameraActivity.CameraActivitySubcomponent.Builder get() {
            return new CameraActivitySubcomponentBuilder();
          }
        };
    this.appExecutorsProvider = DoubleCheck.provider(AppExecutors_Factory.create());
    this.provideCategoryRepositoryProvider =
        DoubleCheck.provider(AppModule_ProvideCategoryRepositoryFactory.create(builder.appModule));
    this.categoryViewModelProvider =
        CategoryViewModel_Factory.create(provideCategoryRepositoryProvider);
    this.mapOfClassOfAndProviderOfViewModelProvider =
        MapProviderFactory.<Class<? extends ViewModel>, ViewModel>builder(1)
            .put(CategoryViewModel.class, (Provider) categoryViewModelProvider)
            .build();
    this.appViewModelFactoryProvider =
        DoubleCheck.provider(
            AppViewModelFactory_Factory.create(mapOfClassOfAndProviderOfViewModelProvider));
    this.provideCameraProvider =
        DoubleCheck.provider(AppModule_ProvideCameraProviderFactory.create(builder.appModule));
  }

  @Override
  public void inject(DesignerApp app) {
    injectDesignerApp(app);
  }

  private DesignerApp injectDesignerApp(DesignerApp instance) {
    DesignerApp_MembersInjector.injectDispatchingAndroidInjector(
        instance, getDispatchingAndroidInjectorOfActivity());
    return instance;
  }

  private static final class Builder implements AppComponent.Builder {
    private AppModule appModule;

    private Application application;

    @Override
    public AppComponent build() {
      if (appModule == null) {
        this.appModule = new AppModule();
      }
      if (application == null) {
        throw new IllegalStateException(Application.class.getCanonicalName() + " must be set");
      }
      return new DaggerAppComponent(this);
    }

    @Override
    public Builder application(Application application) {
      this.application = Preconditions.checkNotNull(application);
      return this;
    }
  }

  private final class MainActivitySubcomponentBuilder
      extends ActivityModule_ContributeMainActivity.MainActivitySubcomponent.Builder {
    private MainActivity seedInstance;

    @Override
    public ActivityModule_ContributeMainActivity.MainActivitySubcomponent build() {
      if (seedInstance == null) {
        throw new IllegalStateException(MainActivity.class.getCanonicalName() + " must be set");
      }
      return new MainActivitySubcomponentImpl(this);
    }

    @Override
    public void seedInstance(MainActivity arg0) {
      this.seedInstance = Preconditions.checkNotNull(arg0);
    }
  }

  private final class MainActivitySubcomponentImpl
      implements ActivityModule_ContributeMainActivity.MainActivitySubcomponent {
    private Provider<FragmentBuildersModule_ContributeMenuFragment.MenuFragmentSubcomponent.Builder>
        menuFragmentSubcomponentBuilderProvider;

    private Provider<
            FragmentBuildersModule_ContributeCategoryFragment.CategoryFragmentSubcomponent.Builder>
        categoryFragmentSubcomponentBuilderProvider;

    private Provider<
            FragmentBuildersModule_ContributeCameraFragment.CameraFragmentSubcomponent.Builder>
        cameraFragmentSubcomponentBuilderProvider;

    private MainActivitySubcomponentImpl(MainActivitySubcomponentBuilder builder) {
      initialize(builder);
    }

    private Map<Class<? extends Fragment>, Provider<AndroidInjector.Factory<? extends Fragment>>>
        getMapOfClassOfAndProviderOfFactoryOf() {
      return MapBuilder
          .<Class<? extends Fragment>, Provider<AndroidInjector.Factory<? extends Fragment>>>
              newMapBuilder(3)
          .put(MenuFragment.class, (Provider) menuFragmentSubcomponentBuilderProvider)
          .put(CategoryFragment.class, (Provider) categoryFragmentSubcomponentBuilderProvider)
          .put(CameraFragment.class, (Provider) cameraFragmentSubcomponentBuilderProvider)
          .build();
    }

    private DispatchingAndroidInjector<Fragment> getDispatchingAndroidInjectorOfFragment() {
      return DispatchingAndroidInjector_Factory.newDispatchingAndroidInjector(
          getMapOfClassOfAndProviderOfFactoryOf());
    }

    @SuppressWarnings("unchecked")
    private void initialize(final MainActivitySubcomponentBuilder builder) {
      this.menuFragmentSubcomponentBuilderProvider =
          new Provider<
              FragmentBuildersModule_ContributeMenuFragment.MenuFragmentSubcomponent.Builder>() {
            @Override
            public FragmentBuildersModule_ContributeMenuFragment.MenuFragmentSubcomponent.Builder
                get() {
              return new MenuFragmentSubcomponentBuilder();
            }
          };
      this.categoryFragmentSubcomponentBuilderProvider =
          new Provider<
              FragmentBuildersModule_ContributeCategoryFragment.CategoryFragmentSubcomponent
                  .Builder>() {
            @Override
            public FragmentBuildersModule_ContributeCategoryFragment.CategoryFragmentSubcomponent
                    .Builder
                get() {
              return new CategoryFragmentSubcomponentBuilder();
            }
          };
      this.cameraFragmentSubcomponentBuilderProvider =
          new Provider<
              FragmentBuildersModule_ContributeCameraFragment.CameraFragmentSubcomponent
                  .Builder>() {
            @Override
            public FragmentBuildersModule_ContributeCameraFragment.CameraFragmentSubcomponent
                    .Builder
                get() {
              return new CameraFragmentSubcomponentBuilder();
            }
          };
    }

    @Override
    public void inject(MainActivity arg0) {
      injectMainActivity(arg0);
    }

    private MainActivity injectMainActivity(MainActivity instance) {
      MainActivity_MembersInjector.injectDispatchingAndroidInjector(
          instance, getDispatchingAndroidInjectorOfFragment());
      return instance;
    }

    private final class MenuFragmentSubcomponentBuilder
        extends FragmentBuildersModule_ContributeMenuFragment.MenuFragmentSubcomponent.Builder {
      private MenuFragment seedInstance;

      @Override
      public FragmentBuildersModule_ContributeMenuFragment.MenuFragmentSubcomponent build() {
        if (seedInstance == null) {
          throw new IllegalStateException(MenuFragment.class.getCanonicalName() + " must be set");
        }
        return new MenuFragmentSubcomponentImpl(this);
      }

      @Override
      public void seedInstance(MenuFragment arg0) {
        this.seedInstance = Preconditions.checkNotNull(arg0);
      }
    }

    private final class MenuFragmentSubcomponentImpl
        implements FragmentBuildersModule_ContributeMenuFragment.MenuFragmentSubcomponent {
      private MenuFragmentSubcomponentImpl(MenuFragmentSubcomponentBuilder builder) {}

      @Override
      public void inject(MenuFragment arg0) {}
    }

    private final class CategoryFragmentSubcomponentBuilder
        extends FragmentBuildersModule_ContributeCategoryFragment.CategoryFragmentSubcomponent
            .Builder {
      private CategoryFragment seedInstance;

      @Override
      public FragmentBuildersModule_ContributeCategoryFragment.CategoryFragmentSubcomponent
          build() {
        if (seedInstance == null) {
          throw new IllegalStateException(
              CategoryFragment.class.getCanonicalName() + " must be set");
        }
        return new CategoryFragmentSubcomponentImpl(this);
      }

      @Override
      public void seedInstance(CategoryFragment arg0) {
        this.seedInstance = Preconditions.checkNotNull(arg0);
      }
    }

    private final class CategoryFragmentSubcomponentImpl
        implements FragmentBuildersModule_ContributeCategoryFragment.CategoryFragmentSubcomponent {
      private CategoryFragmentSubcomponentImpl(CategoryFragmentSubcomponentBuilder builder) {}

      @Override
      public void inject(CategoryFragment arg0) {
        injectCategoryFragment(arg0);
      }

      private CategoryFragment injectCategoryFragment(CategoryFragment instance) {
        CategoryFragment_MembersInjector.injectAppExecutors(
            instance, DaggerAppComponent.this.appExecutorsProvider.get());
        CategoryFragment_MembersInjector.injectViewModelFactory(
            instance, DaggerAppComponent.this.appViewModelFactoryProvider.get());
        return instance;
      }
    }

    private final class CameraFragmentSubcomponentBuilder
        extends FragmentBuildersModule_ContributeCameraFragment.CameraFragmentSubcomponent.Builder {
      private CameraFragment seedInstance;

      @Override
      public FragmentBuildersModule_ContributeCameraFragment.CameraFragmentSubcomponent build() {
        if (seedInstance == null) {
          throw new IllegalStateException(CameraFragment.class.getCanonicalName() + " must be set");
        }
        return new CameraFragmentSubcomponentImpl(this);
      }

      @Override
      public void seedInstance(CameraFragment arg0) {
        this.seedInstance = Preconditions.checkNotNull(arg0);
      }
    }

    private final class CameraFragmentSubcomponentImpl
        implements FragmentBuildersModule_ContributeCameraFragment.CameraFragmentSubcomponent {
      private CameraFragmentSubcomponentImpl(CameraFragmentSubcomponentBuilder builder) {}

      @Override
      public void inject(CameraFragment arg0) {
        injectCameraFragment(arg0);
      }

      private CameraFragment injectCameraFragment(CameraFragment instance) {
        CameraFragment_MembersInjector.injectCameraProvider(
            instance, DaggerAppComponent.this.provideCameraProvider.get());
        return instance;
      }
    }
  }

  private final class CameraActivitySubcomponentBuilder
      extends ActivityModule_ContributeCameraActivity.CameraActivitySubcomponent.Builder {
    private CameraActivity seedInstance;

    @Override
    public ActivityModule_ContributeCameraActivity.CameraActivitySubcomponent build() {
      if (seedInstance == null) {
        throw new IllegalStateException(CameraActivity.class.getCanonicalName() + " must be set");
      }
      return new CameraActivitySubcomponentImpl(this);
    }

    @Override
    public void seedInstance(CameraActivity arg0) {
      this.seedInstance = Preconditions.checkNotNull(arg0);
    }
  }

  private final class CameraActivitySubcomponentImpl
      implements ActivityModule_ContributeCameraActivity.CameraActivitySubcomponent {
    private Provider<FragmentBuildersModule_ContributeMenuFragment.MenuFragmentSubcomponent.Builder>
        menuFragmentSubcomponentBuilderProvider;

    private Provider<
            FragmentBuildersModule_ContributeCategoryFragment.CategoryFragmentSubcomponent.Builder>
        categoryFragmentSubcomponentBuilderProvider;

    private Provider<
            FragmentBuildersModule_ContributeCameraFragment.CameraFragmentSubcomponent.Builder>
        cameraFragmentSubcomponentBuilderProvider;

    private CameraActivitySubcomponentImpl(CameraActivitySubcomponentBuilder builder) {
      initialize(builder);
    }

    private Map<Class<? extends Fragment>, Provider<AndroidInjector.Factory<? extends Fragment>>>
        getMapOfClassOfAndProviderOfFactoryOf() {
      return MapBuilder
          .<Class<? extends Fragment>, Provider<AndroidInjector.Factory<? extends Fragment>>>
              newMapBuilder(3)
          .put(MenuFragment.class, (Provider) menuFragmentSubcomponentBuilderProvider)
          .put(CategoryFragment.class, (Provider) categoryFragmentSubcomponentBuilderProvider)
          .put(CameraFragment.class, (Provider) cameraFragmentSubcomponentBuilderProvider)
          .build();
    }

    private DispatchingAndroidInjector<Fragment> getDispatchingAndroidInjectorOfFragment() {
      return DispatchingAndroidInjector_Factory.newDispatchingAndroidInjector(
          getMapOfClassOfAndProviderOfFactoryOf());
    }

    @SuppressWarnings("unchecked")
    private void initialize(final CameraActivitySubcomponentBuilder builder) {
      this.menuFragmentSubcomponentBuilderProvider =
          new Provider<
              FragmentBuildersModule_ContributeMenuFragment.MenuFragmentSubcomponent.Builder>() {
            @Override
            public FragmentBuildersModule_ContributeMenuFragment.MenuFragmentSubcomponent.Builder
                get() {
              return new MenuFragmentSubcomponentBuilder();
            }
          };
      this.categoryFragmentSubcomponentBuilderProvider =
          new Provider<
              FragmentBuildersModule_ContributeCategoryFragment.CategoryFragmentSubcomponent
                  .Builder>() {
            @Override
            public FragmentBuildersModule_ContributeCategoryFragment.CategoryFragmentSubcomponent
                    .Builder
                get() {
              return new CategoryFragmentSubcomponentBuilder();
            }
          };
      this.cameraFragmentSubcomponentBuilderProvider =
          new Provider<
              FragmentBuildersModule_ContributeCameraFragment.CameraFragmentSubcomponent
                  .Builder>() {
            @Override
            public FragmentBuildersModule_ContributeCameraFragment.CameraFragmentSubcomponent
                    .Builder
                get() {
              return new CameraFragmentSubcomponentBuilder();
            }
          };
    }

    @Override
    public void inject(CameraActivity arg0) {
      injectCameraActivity(arg0);
    }

    private CameraActivity injectCameraActivity(CameraActivity instance) {
      CameraActivity_MembersInjector.injectDispatchingAndroidInjector(
          instance, getDispatchingAndroidInjectorOfFragment());
      return instance;
    }

    private final class MenuFragmentSubcomponentBuilder
        extends FragmentBuildersModule_ContributeMenuFragment.MenuFragmentSubcomponent.Builder {
      private MenuFragment seedInstance;

      @Override
      public FragmentBuildersModule_ContributeMenuFragment.MenuFragmentSubcomponent build() {
        if (seedInstance == null) {
          throw new IllegalStateException(MenuFragment.class.getCanonicalName() + " must be set");
        }
        return new MenuFragmentSubcomponentImpl(this);
      }

      @Override
      public void seedInstance(MenuFragment arg0) {
        this.seedInstance = Preconditions.checkNotNull(arg0);
      }
    }

    private final class MenuFragmentSubcomponentImpl
        implements FragmentBuildersModule_ContributeMenuFragment.MenuFragmentSubcomponent {
      private MenuFragmentSubcomponentImpl(MenuFragmentSubcomponentBuilder builder) {}

      @Override
      public void inject(MenuFragment arg0) {}
    }

    private final class CategoryFragmentSubcomponentBuilder
        extends FragmentBuildersModule_ContributeCategoryFragment.CategoryFragmentSubcomponent
            .Builder {
      private CategoryFragment seedInstance;

      @Override
      public FragmentBuildersModule_ContributeCategoryFragment.CategoryFragmentSubcomponent
          build() {
        if (seedInstance == null) {
          throw new IllegalStateException(
              CategoryFragment.class.getCanonicalName() + " must be set");
        }
        return new CategoryFragmentSubcomponentImpl(this);
      }

      @Override
      public void seedInstance(CategoryFragment arg0) {
        this.seedInstance = Preconditions.checkNotNull(arg0);
      }
    }

    private final class CategoryFragmentSubcomponentImpl
        implements FragmentBuildersModule_ContributeCategoryFragment.CategoryFragmentSubcomponent {
      private CategoryFragmentSubcomponentImpl(CategoryFragmentSubcomponentBuilder builder) {}

      @Override
      public void inject(CategoryFragment arg0) {
        injectCategoryFragment(arg0);
      }

      private CategoryFragment injectCategoryFragment(CategoryFragment instance) {
        CategoryFragment_MembersInjector.injectAppExecutors(
            instance, DaggerAppComponent.this.appExecutorsProvider.get());
        CategoryFragment_MembersInjector.injectViewModelFactory(
            instance, DaggerAppComponent.this.appViewModelFactoryProvider.get());
        return instance;
      }
    }

    private final class CameraFragmentSubcomponentBuilder
        extends FragmentBuildersModule_ContributeCameraFragment.CameraFragmentSubcomponent.Builder {
      private CameraFragment seedInstance;

      @Override
      public FragmentBuildersModule_ContributeCameraFragment.CameraFragmentSubcomponent build() {
        if (seedInstance == null) {
          throw new IllegalStateException(CameraFragment.class.getCanonicalName() + " must be set");
        }
        return new CameraFragmentSubcomponentImpl(this);
      }

      @Override
      public void seedInstance(CameraFragment arg0) {
        this.seedInstance = Preconditions.checkNotNull(arg0);
      }
    }

    private final class CameraFragmentSubcomponentImpl
        implements FragmentBuildersModule_ContributeCameraFragment.CameraFragmentSubcomponent {
      private CameraFragmentSubcomponentImpl(CameraFragmentSubcomponentBuilder builder) {}

      @Override
      public void inject(CameraFragment arg0) {
        injectCameraFragment(arg0);
      }

      private CameraFragment injectCameraFragment(CameraFragment instance) {
        CameraFragment_MembersInjector.injectCameraProvider(
            instance, DaggerAppComponent.this.provideCameraProvider.get());
        return instance;
      }
    }
  }
}
